unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/izpf49b74i15pcr9708s3xdwyqs4jxwl-bash-5.2p32/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/izpf49b74i15pcr9708s3xdwyqs4jxwl-bash-5.2p32/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/z7nr6aqlzv51pk5ar8bgzg2alfqvi8fd-ncurses-6.4.20221231/bin:/nix/store/0kg70swgpg45ipcz3pr2siidq9fn6d77-coreutils-9.5/bin:/nix/store/fnq94lw19pnwdl9p8zhfrad4jmlgxlbr-findutils-4.10.0/bin:/nix/store/7jk4jrd99ngnm9iczcf63mfxqba0ak2y-diffutils-3.10/bin:/nix/store/gjlh1zvckhz0qv795lnzgw2zciklbzj2-gnused-4.9/bin:/nix/store/vsyc8jhsr4d9lm2r8yqq9n3j4i66inlj-gnugrep-3.11/bin:/nix/store/9hifsxkcrkvvb712ghnr3gy5g1aiym2d-gawk-5.2.2/bin:/nix/store/l2l5xr2zczq19gqpqz4j8vxxia1j41s1-gnutar-1.35/bin:/nix/store/164s7a7yscnicprzrr78bvk45d77a3yg-gzip-1.13/bin:/nix/store/f8p74dj4r4my8sw5prmm3y4ddkz7591j-bzip2-1.0.8-bin/bin:/nix/store/axrdky652lsmif6m5i8b55q91v4ly4gy-gnumake-4.4.1/bin:/nix/store/izpf49b74i15pcr9708s3xdwyqs4jxwl-bash-5.2p32/bin:/nix/store/7wg4bz2sika3wd7541rndbnwcq6k9h8v-patch-2.7.6/bin:/nix/store/02mf752h7f5fn7989awzca4ygy94k7w7-xz-5.6.2-bin/bin:/nix/store/fv56zpi80jpakbfmv16r60xvyqwzff6r-file-5.45/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LINENO='76'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/b74nxf0yn2dzha02mgdxyklaqjaijzqp-binutils-wrapper-2.42'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='8'
export NIX_BUILD_CORES
NIX_CC='/nix/store/zznja5f8v3jafffyah1rk46vpfcn38dv-gcc-wrapper-13.3.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=yh1qvvh543 -isystem /nix/store/0w4q8asq9sn56dl0sxp1m8gk4vy2ygs8-zlib-1.3.1-dev/include -isystem /nix/store/04ca5xwvasz6s3jg0k7njz6rzi0d225w-jq-1.7.1-dev/include -isystem /nix/store/0w4q8asq9sn56dl0sxp1m8gk4vy2ygs8-zlib-1.3.1-dev/include -isystem /nix/store/04ca5xwvasz6s3jg0k7njz6rzi0d225w-jq-1.7.1-dev/include'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs'
export NIX_HARDENING_ENABLE
NIX_LDFLAGS='-rpath /home/rkc/Code/payme/outputs/out/lib  -L/nix/store/rqs1zrcncqz3966khjndg1183cpdnqxs-zlib-1.3.1/lib -L/nix/store/n2vk1zmfzy726amnpr96jibk4zaya6qq-jq-1.7.1-lib/lib -L/nix/store/z7nr6aqlzv51pk5ar8bgzg2alfqvi8fd-ncurses-6.4.20221231/lib -L/nix/store/4ybgqxv43z9sk9lccwq6dgmz6j32syr1-libffi-3.4.6/lib -L/nix/store/hld4f6s0yapc7qp71zfyjrqgrpvk6k4d-elfutils-0.191/lib -L/nix/store/mdnhaasvbh5mmxqd5yqc9qvyzc48i998-gmp-with-cxx-6.3.0/lib -L/nix/store/rqs1zrcncqz3966khjndg1183cpdnqxs-zlib-1.3.1/lib -L/nix/store/n2vk1zmfzy726amnpr96jibk4zaya6qq-jq-1.7.1-lib/lib -L/nix/store/z7nr6aqlzv51pk5ar8bgzg2alfqvi8fd-ncurses-6.4.20221231/lib -L/nix/store/4ybgqxv43z9sk9lccwq6dgmz6j32syr1-libffi-3.4.6/lib -L/nix/store/hld4f6s0yapc7qp71zfyjrqgrpvk6k4d-elfutils-0.191/lib -L/nix/store/mdnhaasvbh5mmxqd5yqc9qvyzc48i998-gmp-with-cxx-6.3.0/lib'
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/mqyp0qgmi89f36l6j1lhwhvmn0srqrfb-ghcid-0.8.9-bin/bin:/nix/store/s23w5jmvvg9wliimzjmiq2r4aiwpgrqh-cabal-install-3.12.1.0/bin:/nix/store/x8jzsy0y1zk30mcvav2rh6lrw1gbzzy3-jq-1.7.1-bin/bin:/nix/store/bw7g876y9qflwfq1zy7359pfc94ap95i-hoogle-5.0.18.4/bin:/nix/store/xpl82dnbis5ki1x6b64p85hs9cnw9gwz-haskell-language-server-2.9.0.0/bin:/nix/store/s782cf4qnkkhl46svww1b460rzh2glb3-aeson-pretty-0.8.10/bin:/nix/store/imkzk5xafz1ppv4plk5m61mslq3v8hqp-apply-refact-0.13.0.0/bin:/nix/store/79kfhxz7mx46ggba4digrmbdamcfrrry-ghc-9.6.6/bin:/nix/store/505hn22khv3ki1ciw4c1qyr89dw81dhc-floskell-0.11.1/bin:/nix/store/draswmvfncs54ilvn98v0x3j0mbinv1s-fourmolu-0.14.0.0/bin:/nix/store/pdri4rmkj4vlnqfcc34m3xawp69rs9ic-ghcide-2.9.0.0/bin:/nix/store/sn9xsmw398r9g1pqkw736h198cnialr2-constraints-extras-0.4.0.1/bin:/nix/store/gn1q6q8g6iq24yf8ra4mpd20w6v23ii2-hie-bios-0.14.0/bin:/nix/store/05cpdgrfvgzda1bnzry3scl5gnwg5943-hiedb-0.6.0.1/bin:/nix/store/l55ickr47vzdw3rb2hnzspzh29nb0q4r-lsp-types-2.3.0.0/bin:/nix/store/26rlz45s54gs9rnyqp8m1ydcxliqrpsm-implicit-hie-0.1.4.0/bin:/nix/store/0rwlfpv5q4p27pygb592zkrin1aig23z-hlint-3.6.1/bin:/nix/store/1awpgnm4ijffmnay86h9lrvxi2gyf7im-cpphs-1.20.9.1/bin:/nix/store/k29d5x6zkkq3ll2pjza3q08x5lji5rir-hscolour-1.25/bin:/nix/store/8fpnnqzwjpykkl9wcmyb1n4j5xm863ns-ormolu-0.7.2.0-bin/bin:/nix/store/s9iz5knlxiiajapd58fqx28lbv1kpfqb-retrie-1.2.3/bin:/nix/store/z4g2ydchmdl3admrax1c3rz8dak9by89-shake-0.19.8/bin:/nix/store/hwx3v93mkiqw1jbafvvls4by2i4d9m7d-stan-0.1.3.0/bin:/nix/store/ilvw92l0xf0jq0lraarl064gbdqn6nsz-extensions-0.1.0.1/bin:/nix/store/4xdl3fcjwfyw0c2a8rp7vbdkwbykk2x2-pretty-simple-4.1.2.0/bin:/nix/store/lf97ia5yf8dd3isinrr3yr7060s7slxa-stylish-haskell-0.14.5.0/bin:/nix/store/3arz93p7rcngc14502zzglf8mi6mvpn7-ghc-9.6.6-with-packages/bin:/nix/store/p28ag98pq969vklwz28fw20wvrv64cgj-cabal-install-3.12.1.0/bin:/nix/store/5r5pi24s6mym2aaj9r3aq26njh87gsjm-open-browser-0.2.1.0/bin:/nix/store/k97fic16vmpf9z6vjx5dgd6rxcvv5wwh-patchelf-0.15.0/bin:/nix/store/zznja5f8v3jafffyah1rk46vpfcn38dv-gcc-wrapper-13.3.0/bin:/nix/store/x8rg4vhgd20i8vzykm1196f9qdb8klhh-gcc-13.3.0/bin:/nix/store/k4jv8fr725amxalmplzhnlyik93wvk3z-glibc-2.39-52-bin/bin:/nix/store/0kg70swgpg45ipcz3pr2siidq9fn6d77-coreutils-9.5/bin:/nix/store/b74nxf0yn2dzha02mgdxyklaqjaijzqp-binutils-wrapper-2.42/bin:/nix/store/81xsp348yfgmaan9r5055mcdjfw7a8wc-binutils-2.42/bin:/nix/store/z7nr6aqlzv51pk5ar8bgzg2alfqvi8fd-ncurses-6.4.20221231/bin:/nix/store/0kg70swgpg45ipcz3pr2siidq9fn6d77-coreutils-9.5/bin:/nix/store/fnq94lw19pnwdl9p8zhfrad4jmlgxlbr-findutils-4.10.0/bin:/nix/store/7jk4jrd99ngnm9iczcf63mfxqba0ak2y-diffutils-3.10/bin:/nix/store/gjlh1zvckhz0qv795lnzgw2zciklbzj2-gnused-4.9/bin:/nix/store/vsyc8jhsr4d9lm2r8yqq9n3j4i66inlj-gnugrep-3.11/bin:/nix/store/9hifsxkcrkvvb712ghnr3gy5g1aiym2d-gawk-5.2.2/bin:/nix/store/l2l5xr2zczq19gqpqz4j8vxxia1j41s1-gnutar-1.35/bin:/nix/store/164s7a7yscnicprzrr78bvk45d77a3yg-gzip-1.13/bin:/nix/store/f8p74dj4r4my8sw5prmm3y4ddkz7591j-bzip2-1.0.8-bin/bin:/nix/store/axrdky652lsmif6m5i8b55q91v4ly4gy-gnumake-4.4.1/bin:/nix/store/izpf49b74i15pcr9708s3xdwyqs4jxwl-bash-5.2p32/bin:/nix/store/7wg4bz2sika3wd7541rndbnwcq6k9h8v-patch-2.7.6/bin:/nix/store/02mf752h7f5fn7989awzca4ygy94k7w7-xz-5.6.2-bin/bin:/nix/store/fv56zpi80jpakbfmv16r60xvyqwzff6r-file-5.45/bin'
export PATH
PS4='+ '
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/s23w5jmvvg9wliimzjmiq2r4aiwpgrqh-cabal-install-3.12.1.0/share:/nix/store/rqs1zrcncqz3966khjndg1183cpdnqxs-zlib-1.3.1/share:/nix/store/xb3mppgd44fnb6gqb19jk6kwc2jsqsp1-attoparsec-0.14.4/share:/nix/store/r81q6ja649d7xzlgvvmkz9g0vrarimas-attoparsec-aeson-2.1.0.0/share:/nix/store/xpl82dnbis5ki1x6b64p85hs9cnw9gwz-haskell-language-server-2.9.0.0/share:/nix/store/79kfhxz7mx46ggba4digrmbdamcfrrry-ghc-9.6.6/share:/nix/store/f20h1592p5ff039j061b4kp05zhzz1f7-fail-4.9.0.0/share:/nix/store/8smwy3x9qc64a5f1alx3gicz9brc09ah-libyaml-clib-0.2.5/share:/nix/store/l55ickr47vzdw3rb2hnzspzh29nb0q4r-lsp-types-2.3.0.0/share:/nix/store/0rwlfpv5q4p27pygb592zkrin1aig23z-hlint-3.6.1/share:/nix/store/8fpnnqzwjpykkl9wcmyb1n4j5xm863ns-ormolu-0.7.2.0-bin/share:/nix/store/hwx3v93mkiqw1jbafvvls4by2i4d9m7d-stan-0.1.3.0/share:/nix/store/3arz93p7rcngc14502zzglf8mi6mvpn7-ghc-9.6.6-with-packages/share:/nix/store/p28ag98pq969vklwz28fw20wvrv64cgj-cabal-install-3.12.1.0/share:/nix/store/k97fic16vmpf9z6vjx5dgd6rxcvv5wwh-patchelf-0.15.0/share'
export XDG_DATA_DIRS
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs=''
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/izpf49b74i15pcr9708s3xdwyqs4jxwl-bash-5.2p32/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/k97fic16vmpf9z6vjx5dgd6rxcvv5wwh-patchelf-0.15.0 /nix/store/9l3havpzc3w1xggd19l5c395az4yh449-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/12lvf0c7xric9cny7slvf9cmhypl1p67-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/aazf105snicrlvyzzbdj85sx4179rpfp-set-source-date-epoch-to-latest.sh /nix/store/gps9qrh99j7g02840wv5x78ykmz30byp-strip.sh /nix/store/zznja5f8v3jafffyah1rk46vpfcn38dv-gcc-wrapper-13.3.0'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
guess='8'
initialPath='/nix/store/0kg70swgpg45ipcz3pr2siidq9fn6d77-coreutils-9.5 /nix/store/fnq94lw19pnwdl9p8zhfrad4jmlgxlbr-findutils-4.10.0 /nix/store/7jk4jrd99ngnm9iczcf63mfxqba0ak2y-diffutils-3.10 /nix/store/gjlh1zvckhz0qv795lnzgw2zciklbzj2-gnused-4.9 /nix/store/vsyc8jhsr4d9lm2r8yqq9n3j4i66inlj-gnugrep-3.11 /nix/store/9hifsxkcrkvvb712ghnr3gy5g1aiym2d-gawk-5.2.2 /nix/store/l2l5xr2zczq19gqpqz4j8vxxia1j41s1-gnutar-1.35 /nix/store/164s7a7yscnicprzrr78bvk45d77a3yg-gzip-1.13 /nix/store/f8p74dj4r4my8sw5prmm3y4ddkz7591j-bzip2-1.0.8-bin /nix/store/axrdky652lsmif6m5i8b55q91v4ly4gy-gnumake-4.4.1 /nix/store/izpf49b74i15pcr9708s3xdwyqs4jxwl-bash-5.2p32 /nix/store/7wg4bz2sika3wd7541rndbnwcq6k9h8v-patch-2.7.6 /nix/store/02mf752h7f5fn7989awzca4ygy94k7w7-xz-5.6.2-bin /nix/store/fv56zpi80jpakbfmv16r60xvyqwzff6r-file-5.45'
mesonFlags=''
export mesonFlags
name='payme-devShell-env'
export name
nativeBuildInputs='/nix/store/mqyp0qgmi89f36l6j1lhwhvmn0srqrfb-ghcid-0.8.9-bin /nix/store/s23w5jmvvg9wliimzjmiq2r4aiwpgrqh-cabal-install-3.12.1.0 /nix/store/0w4q8asq9sn56dl0sxp1m8gk4vy2ygs8-zlib-1.3.1-dev /nix/store/04ca5xwvasz6s3jg0k7njz6rzi0d225w-jq-1.7.1-dev /nix/store/bw7g876y9qflwfq1zy7359pfc94ap95i-hoogle-5.0.18.4 /nix/store/xpl82dnbis5ki1x6b64p85hs9cnw9gwz-haskell-language-server-2.9.0.0 /nix/store/3arz93p7rcngc14502zzglf8mi6mvpn7-ghc-9.6.6-with-packages /nix/store/p28ag98pq969vklwz28fw20wvrv64cgj-cabal-install-3.12.1.0 /nix/store/0ajy21fdx91yqq5jhv5bw0gk20c4b9kf-ghcid-0.8.9 /nix/store/xpl82dnbis5ki1x6b64p85hs9cnw9gwz-haskell-language-server-2.9.0.0 /nix/store/0rwlfpv5q4p27pygb592zkrin1aig23z-hlint-3.6.1'
export nativeBuildInputs
out='/home/rkc/Code/payme/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/zznja5f8v3jafffyah1rk46vpfcn38dv-gcc-wrapper-13.3.0'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/mqyp0qgmi89f36l6j1lhwhvmn0srqrfb-ghcid-0.8.9-bin' '/nix/store/s23w5jmvvg9wliimzjmiq2r4aiwpgrqh-cabal-install-3.12.1.0' '/nix/store/0w4q8asq9sn56dl0sxp1m8gk4vy2ygs8-zlib-1.3.1-dev' '/nix/store/rqs1zrcncqz3966khjndg1183cpdnqxs-zlib-1.3.1' '/nix/store/04ca5xwvasz6s3jg0k7njz6rzi0d225w-jq-1.7.1-dev' '/nix/store/x8jzsy0y1zk30mcvav2rh6lrw1gbzzy3-jq-1.7.1-bin' '/nix/store/n2vk1zmfzy726amnpr96jibk4zaya6qq-jq-1.7.1-lib' '/nix/store/bw7g876y9qflwfq1zy7359pfc94ap95i-hoogle-5.0.18.4' '/nix/store/4m2fqzqc54ir06rzz4imb7w5pq63ff95-aeson-2.1.2.1' '/nix/store/xb3mppgd44fnb6gqb19jk6kwc2jsqsp1-attoparsec-0.14.4' '/nix/store/0zx53mhn3rw01zbdc7iykdcr8l304wp9-scientific-0.3.7.0' '/nix/store/gq6l2zd66rknxss9j1zfl24730ka719p-hashable-1.4.4.0' '/nix/store/9kfrcf0dvv0bw7xb6za3jr0nfjjwihik-os-string-2.0.6' '/nix/store/xnxj89sv1544fcc6ss1cg8qal788a1pd-integer-logarithms-1.0.3.1' '/nix/store/4xw8ri25vccdjzyl90c2m0rbx2q1z2fr-primitive-0.8.0.0' '/nix/store/k8ksrppa6z9y2vf22an6izbhyg53c19c-base-compat-batteries-0.13.1' '/nix/store/z6gxyldb1i0f7l9p8232ski6387isjrn-base-compat-0.13.1' '/nix/store/bg2w8k0f3gik6cmf3yw860zwiyb312i8-data-fix-0.3.4' '/nix/store/0cvydz1cv2r29rlhch8sapsprzh2spi3-dlist-1.0' '/nix/store/1i46qccr99l1b51mnxhhcw2lylx0w8v9-generically-0.1.1' '/nix/store/sa8fsza4g7clcql256gmmsc5k5byz1qd-indexed-traversable-0.1.4' '/nix/store/h54wapkrz0zfvr6bqhjyflw0rmmr5a1d-OneTuple-0.4.2' '/nix/store/7w771kgs9zqcwffmy0wnyxjbmnavj0lv-QuickCheck-2.14.3' '/nix/store/3nrp0m5wnvc3aqzkkh9i448l4x4jwpar-random-1.2.1.2' '/nix/store/9aq77w1lhd22j6b570zbp2hkjwzq4hpz-splitmix-0.1.0.5' '/nix/store/9aq77w1lhd22j6b570zbp2hkjwzq4hpz-splitmix-0.1.0.5' '/nix/store/4wjjsmp9xkdmg029ly0470kw7xdalk10-semialign-1.3.1' '/nix/store/wblqy3azyw6qwamm9b141xa8whzm3axw-indexed-traversable-instances-0.1.2' '/nix/store/xd3410ri55b50zhxws4fwcmb0av4z0qf-tagged-0.8.8' '/nix/store/cxp4g76si2pzc5qrvzww2h9f0r2m8qwf-unordered-containers-0.2.20' '/nix/store/xmrsxxcmv2g4hn8xpsmxsj9w95fabacl-vector-0.13.1.0' '/nix/store/zpsnkr46m63884x6d72i6nyy9y32xg3p-vector-stream-0.1.0.1' '/nix/store/g4fswkri03yimq6agpc1jccf6k6bi14w-semigroupoids-6.0.1' '/nix/store/065gqc86lbz57r0k5r1s05fq5m2mjhbq-base-orphans-0.9.2' '/nix/store/7k5qc2n1z22j01r9gsd4v5b0fc756yyv-bifunctors-5.6.2' '/nix/store/m6fanavmbhvg8j1wax1lxllh58pj6whq-assoc-1.1.1' '/nix/store/0c1g8mlpvqqqimq14j6jj8abp0my5f37-comonad-5.0.8' '/nix/store/8k5gyc36wz0irk1nxdif3h44x1lvwbrr-distributive-0.6.2.1' '/nix/store/vjmza08fg1x3zdai1yxk0yiy8cls6dv2-transformers-compat-0.7.2' '/nix/store/qw25wi6s39fpxix6hwdlwsj7y633yz84-th-abstraction-0.5.0.0' '/nix/store/kmbx03p6mb68qn9577khgaim88f2d0m7-contravariant-1.5.5' '/nix/store/9nninaijlf4gsvn66n8vi4z3b4xxmwq5-StateVar-1.2.2' '/nix/store/jajx5v6m84yh38lpc6x26x1p9m97cv0y-these-1.2.1' '/nix/store/wd1b0da7m8sla0fkb9lr1wxixxf0wkj2-strict-0.5' '/nix/store/l6fzmpgqdpfm4shmsqf5fpazjlvbs41d-text-short-0.1.6' '/nix/store/wz8vmz1nsibrzqybll9kp4n4ymjq24w6-time-compat-1.9.6.1' '/nix/store/65056yj1x0vqmawji0hpk0saphv4vy7s-uuid-types-1.0.5.1' '/nix/store/859bdgw25k4mj0rksjd4i01fxdc85015-witherable-0.4.2' '/nix/store/qjpsxbp9kzf41akzhm0lxwwsxlp78f86-blaze-html-0.9.2.0' '/nix/store/4rx8zcdaywaaami0mmmhk4v8cqk2jxzn-blaze-builder-0.4.2.3' '/nix/store/iywr2z6ga6q8dcnrh721xin92njqiygj-blaze-markup-0.8.3.0' '/nix/store/iywr2z6ga6q8dcnrh721xin92njqiygj-blaze-markup-0.8.3.0' '/nix/store/1lc6pq873qvx0rpfm4h6pvlfjdslcif8-cmdargs-0.10.22' '/nix/store/g29336wzxrj6r34wc12n38cgi20919ha-conduit-1.3.5' '/nix/store/953b5dwm6skgw3mnqrzmsmb9ccixgwam-mono-traversable-1.0.17.0' '/nix/store/lyqagx8j0xjl270l1kb1qgq99p70brwm-split-0.2.5' '/nix/store/7hkkrz3ay32pw58bd8cm5a2qngkna2jd-vector-algorithms-0.9.0.2' '/nix/store/p87k44x96dfpql4bda7c11yi1zv3zq9f-bitvec-1.1.5.0' '/nix/store/wdr15zkmzvzdnx0fl2xm0w60ls5yqfjz-resourcet-1.3.0' '/nix/store/6g0pf9qfamqg3xds3ddd4l4wj302w1xj-unliftio-core-0.2.1.0' '/nix/store/6g0pf9qfamqg3xds3ddd4l4wj302w1xj-unliftio-core-0.2.1.0' '/nix/store/q7mgxzg1gjd0rp2siih7wwclsqmf4m75-conduit-extra-1.3.6' '/nix/store/rs8b1nygy9620zqz99lj1p198r1n9dpk-async-2.2.5' '/nix/store/kmi4axilw99v4hz1flja4197sxq0vvaf-network-3.1.4.0' '/nix/store/cyp1448qpm9khlvsc0xng0022vg761gj-streaming-commons-0.2.2.6' '/nix/store/ll61aj0xc9026i0gxqc5vgm06zvxmp7d-zlib-0.6.3.0' '/nix/store/k0cf8n512pq6g02lw8jjiik9v124abc6-typed-process-0.2.11.1' '/nix/store/lsx1f2cb33drxscpni9g3jr51sfz33a8-crypton-connection-0.3.2' '/nix/store/b13pi7c3a8h7mmgkcd3jmmg6slbawikl-basement-0.0.16' '/nix/store/z0f0701lyjlsfcnpasvn23j9r9vfardc-crypton-x509-1.7.7' '/nix/store/zxz4wl5krp9d4qr147ncs0z4naqwrcs1-asn1-encoding-0.9.6' '/nix/store/3isv8v7zl1kzvadf6cvah1lslisdhqpi-asn1-types-0.3.4' '/nix/store/cj8997bznh0q2vzx5c7r3r97g6cbb9yc-hourglass-0.2.12' '/nix/store/ks0f7w0mzjclnqjpng31hj7wf8p6clg2-memory-0.18.0' '/nix/store/88n4f32ql224lzl59jqbvrqs4i40vzak-asn1-parse-0.9.5' '/nix/store/68r0fjzj2bszdd5nl0iz884ca744nhv9-crypton-0.34' '/nix/store/mh7g1nwpcd819pw8aqwl9bkf6ay6r3qg-pem-0.2.4' '/nix/store/9yi5nxhgcrs9j6xsq5pfzlrpkbg9mmwb-crypton-x509-store-1.6.9' '/nix/store/zvsdmvbwd0b8qj6nxlkf2ipny659wdsy-crypton-x509-system-1.6.7' '/nix/store/v91k6vnn7j99n0vdmch2ladgrhgma5vs-crypton-x509-validation-1.6.12' '/nix/store/bkq153aywkcpvshk8ahsln6nvlrbdwdl-data-default-class-0.1.2.0' '/nix/store/bkq153aywkcpvshk8ahsln6nvlrbdwdl-data-default-class-0.1.2.0' '/nix/store/vrnvfy4bkmxgjhpnywngxr7k2kqj8ads-socks-0.6.1' '/nix/store/vyar4qmpd9dqzxid25s2pdwsncd7lbcj-cereal-0.5.8.3' '/nix/store/zwg0ahk93n15sp4xyp8lwm458zcwb8rg-tls-1.8.0' '/nix/store/nk2ssjlnlqkjpc5aikg4bkl24c1f4cn3-unix-time-0.4.15' '/nix/store/59afsr8vihliyc2xhj2lfavhk9q1g9s7-old-time-1.1.0.4' '/nix/store/mhy7s1a0lq1l9clfhmv3k3fnj4w8ndd4-old-locale-1.0.0.7' '/nix/store/g44mylg94h8a3dwgqz7cawa5hd3h4nsp-extra-1.7.16' '/nix/store/j5jylxlryxlbn7ypwnkygc4vdpb56y1h-clock-0.8.4' '/nix/store/06yx9fsh1nhsr7wbikjsswgjziqh2ln6-foundation-0.0.30' '/nix/store/k8k62dxfly3dgna1l675m255yzrbjk4w-haskell-src-exts-1.23.1' '/nix/store/wyydknndkglyxvmv7vxmi6f6l5smigvq-http-conduit-2.3.8.3' '/nix/store/r81q6ja649d7xzlgvvmkz9g0vrarimas-attoparsec-aeson-2.1.0.0' '/nix/store/izvxs8j0yav8fgz8hqhyfpmfgm17bcc2-http-client-0.7.17' '/nix/store/ksgszziqjnvqgi6dg4g94ssqrnykk2lb-base64-bytestring-1.2.1.0' '/nix/store/pj4y8a8rwrnhkvby4w8czvdj8zxn696c-case-insensitive-1.2.1.0' '/nix/store/w80b0ymiqksqrqwcslj4cr1mg5c4w19k-cookie-0.4.6' '/nix/store/drss4nmlmg3pyv5sdijkm8235r8zr9i4-http-types-0.12.4' '/nix/store/706grvwrj39bf8fggdp0irw75qimcbki-iproute-1.7.14' '/nix/store/8xirpbfx6l8baikhzm96s4gwgygfh3dq-appar-0.1.8' '/nix/store/w6w0lg5pqk9g0csv0vw5vw60bm4ikds2-byteorder-1.0.4' '/nix/store/qhih3j003wckzrvpp4bkxz50nfp5lc0c-mime-types-0.1.2.0' '/nix/store/zn2abxy8pqdvq8vm95h6z75hjvqb24jk-network-uri-2.6.4.2' '/nix/store/652wvizfwi6h4jbra12x2hxcib0fki4y-th-compat-0.1.5' '/nix/store/rs856w9b0fvjpsm3swc8hrnm2kfayvjy-http-client-tls-0.3.6.3' '/nix/store/364x0pzmyq6bph22z1pd3ch1a5c7a6gr-js-flot-0.8.3' '/nix/store/n3f2zl7b9jlbh8sn85cxvrd3rr6hsl17-js-jquery-3.3.1' '/nix/store/yyg7zxlfx9d9ksl54msw2n6liv65wfiw-mmap-0.5.9' '/nix/store/khigd113a7pbkbxmhlbrrzxw0ajl6bds-process-extras-0.7.4' '/nix/store/0wf3ma8bz9ajwc6knv22vk4lnl8ssnjf-data-default-0.7.1.1' '/nix/store/5a3l9q1llhrd0d3rwf741jcyigxdc7vq-data-default-instances-containers-0.0.1' '/nix/store/m9261hrbn65yc8h1yiyx4047px3z5ii6-data-default-instances-dlist-0.0.1' '/nix/store/s3cnmqyir62mc55vyggzlz6l89ck0wav-data-default-instances-old-locale-0.0.1' '/nix/store/hvlbr1i00px9p2fj9m4wz8p4gvk2m323-generic-deriving-1.14.5' '/nix/store/hndkvfyqb20b0isj00phjgx1qmq59kjd-ListLike-4.7.8.2' '/nix/store/61yr9hcddpw12afapy61vpcm9v7f5324-fmlist-0.9.4' '/nix/store/m9n77mv822dy3216r9l3qarryqlgfz95-utf8-string-1.0.2' '/nix/store/xb0b3hfasglqyzq2lz22wq02d5cyaw5h-safe-0.3.21' '/nix/store/v778ikjmi3bnlw554z2zpj96cap3hx8h-storable-tuple-0.1' '/nix/store/vhc0m43w9n9p73r89z3gxpqfw0kbjkx4-storable-record-0.0.7' '/nix/store/a1fvrrw6wy0v1nmxs3p5c4hymv5szijy-semigroups-0.20' '/nix/store/7wx9nqj4w7yzb4ziwhy2g05ndmk97mmy-utility-ht-0.0.17.2' '/nix/store/7wx9nqj4w7yzb4ziwhy2g05ndmk97mmy-utility-ht-0.0.17.2' '/nix/store/264z759farh4ksh19xf6sg5d5nj4233d-tar-0.5.1.1' '/nix/store/1y3f8w0cxmbl5vrisx1ll5aiflhcsx31-uniplate-1.6.13' '/nix/store/i7rw20rjhjjk0ghc5q22d9wjj5wbmjyr-syb-0.7.2.4' '/nix/store/csh6scysih6mq699ncdaar1ifprc752w-wai-3.2.4' '/nix/store/gv1ck22104y3m9hy9kl71xv1a82clz9c-vault-0.3.1.5' '/nix/store/2pg6pgp71bfzmgnqnsrl1fqrsbn7iafy-wai-logger-2.4.1' '/nix/store/vd32nf84wkllz69xq4l1d2ri3knfqzll-fast-logger-3.2.3' '/nix/store/4ws4vjxpc5n8bc4zbyg2xypgvy75w145-auto-update-0.1.6' '/nix/store/bwlz3igw4wq1ba079ycv9f5rg2ps8zp3-easy-file-0.2.5' '/nix/store/lhz5d4fv3p99j18g41pi4s32dzy0i507-unix-compat-0.7.2' '/nix/store/vr3j4grzv31kg38mhnr6p5c84fk9jl3g-warp-3.3.31' '/nix/store/1z303fzlkcn8vm4m52gjqn77ws5rnfi1-bsb-http-chunked-0.0.0.4' '/nix/store/65bjjay60b1hi9awzzpb6sf9g6klh4kh-http-date-0.0.11' '/nix/store/1zj59824y0crbcp44x3y5iyrqwj4zc5d-http2-5.0.1' '/nix/store/ks4kl358i5qbc0xbhzahys8y19blpbcw-network-byte-order-0.1.7' '/nix/store/m328say7lq1qmhy8zqsiq802cj44094h-network-control-0.0.2' '/nix/store/bb4bv8yq8pxiwki55q3r5js0fxma63vg-psqueues-0.2.8.0' '/nix/store/g1ynqfy0khsj4x3alblh8d7avi7ygnlm-time-manager-0.0.1' '/nix/store/p3xykwp4wmbgq7qd533480cmswsjxdq6-unliftio-0.2.25.0' '/nix/store/bzpy3s0ysg7lnsx8h07gdgkahl2xcg1w-safe-exceptions-0.1.7.4' '/nix/store/sjmxwi5jn44l3c6gmzk8jsi2aql0vi0v-recv-0.1.0' '/nix/store/9r7vm6qirnfh9ig192w0y31n1fycnrb2-simple-sendfile-0.2.32' '/nix/store/lhn8pq0104gi9p7ypdpfb8a9c4qyz3qg-word8-0.1.3' '/nix/store/lq7f8340vn4ggz7gqncif6bl4qlczm8k-warp-tls-3.4.6' '/nix/store/8dnp281dib7nkyl2hf5qprv8d42wm9yd-tls-session-manager-0.0.4' '/nix/store/xpl82dnbis5ki1x6b64p85hs9cnw9gwz-haskell-language-server-2.9.0.0' '/nix/store/s782cf4qnkkhl46svww1b460rzh2glb3-aeson-pretty-0.8.10' '/nix/store/imkzk5xafz1ppv4plk5m61mslq3v8hqp-apply-refact-0.13.0.0' '/nix/store/m6vcmsab60yx3h3kqbjkk15shcn942nh-filemanip-0.3.6.3' '/nix/store/79kfhxz7mx46ggba4digrmbdamcfrrry-ghc-9.6.6' '/nix/store/vcx68c9pyraih89vif0ia9w8i1v0lgwx-ghc-exactprint-1.7.1.0' '/nix/store/f20h1592p5ff039j061b4kp05zhzz1f7-fail-4.9.0.0' '/nix/store/zy33y32mgfsmphfvf20nzrc7f75r4mla-free-5.2' '/nix/store/21976wik4iskkp0fcd8mnild72wkqmq2-profunctors-5.6.2' '/nix/store/rszk6al818pkz0clqyksp12p7rn7q80i-transformers-base-0.4.6' '/nix/store/dyahc6xn2bd5d7nggq63clndvs19zfwf-ordered-containers-0.2.4' '/nix/store/9hvp90fa9b88jqkgbw9i86qq3g3vdzmn-refact-0.3.0.2' '/nix/store/kwyabsivp53f5y7sjrs5hf6zy96p9m0w-ghc-paths-0.1.0.12' '/nix/store/wvx4wlj6b00cym8vixl35ijbbfm0ga26-optparse-applicative-0.18.1.0' '/nix/store/4ffw4mgnsqv0sgfy98cw26kalv38pz8n-prettyprinter-1.7.1' '/nix/store/8ai8bad2pzfibymy725a2kb8skvjb20z-prettyprinter-ansi-terminal-1.1.3' '/nix/store/jvwjqqn8fkn7lywil1szwg28x2q1272g-ansi-terminal-1.0.2' '/nix/store/9k989y2f9zfzrg9snrnyszrn28dr37jb-ansi-terminal-types-0.11.5' '/nix/store/2qhf1srx68fxainxw8z1562r8w8f7cbi-colour-2.3.6' '/nix/store/2qhf1srx68fxainxw8z1562r8w8f7cbi-colour-2.3.6' '/nix/store/8rzhcx6vw7d4i03hpzk54r19c599d18a-Diff-0.4.1' '/nix/store/505hn22khv3ki1ciw4c1qyr89dw81dhc-floskell-0.11.1' '/nix/store/605w493dpf6rg8dnpz13bd8qsfyknhid-monad-dijkstra-0.1.1.5' '/nix/store/l5gvnwbjvimm724a8sa2x8a0sprn0pf6-ansi-wl-pprint-1.0.2' '/nix/store/0q11mhs3qc3wdc9qcfjhnnpzxq1zlvj9-prettyprinter-compat-ansi-wl-pprint-1.0.2' '/nix/store/n2rvj6aakfnkkv16rjm5lny0z1k6yf2c-foldl-1.4.16' '/nix/store/draswmvfncs54ilvn98v0x3j0mbinv1s-fourmolu-0.14.0.0' '/nix/store/gciil2c7r2pchydwn6ll6zxrivbns25g-file-embed-0.0.16.0' '/nix/store/x2yz1vg9pvvkyph3pgl5ajswgb5kzfj0-ghc-lib-parser-9.6.6.20240701' '/nix/store/vpcwh69al9fnjia8f5a4phr2jjv0wadj-megaparsec-9.5.0' '/nix/store/z5dac5fvl3ppv79jih167ixkrg9i3nbz-parser-combinators-1.3.0' '/nix/store/kkq9l08rlg4qi93w7yfyz3p4j88av5pb-MemoTrie-0.6.11' '/nix/store/xqwrqkn80jpdm96vaa2b0vd2a43ym25l-newtype-generics-0.6.2' '/nix/store/20i28xmsks8wa4p0bm00sn6sn96xrkpk-yaml-0.11.11.2' '/nix/store/sh83rr7fsfr0za34szdm4fiibhskk3pd-libyaml-0.1.4' '/nix/store/8smwy3x9qc64a5f1alx3gicz9brc09ah-libyaml-clib-0.2.5' '/nix/store/f385j0vy15k2c4np7z6mgbmyvxylqvfz-th-env-0.1.1' '/nix/store/bfvc67c12vjki3z4x7j6196wbq50xpl0-fuzzy-0.1.1.0' '/nix/store/gc9ryxvd0zi9y1hm4cy2ygmmdsn3lf2y-monoid-subclasses-1.2.5.1' '/nix/store/34k0yci69b7vzjgpzmcam88an9zikf4m-commutative-semigroups-0.1.1.0' '/nix/store/z5qmvzjmq36bcms6104j7aq2d1ap21hn-primes-0.2.1.0' '/nix/store/7kflr0m1951fy9acqhj520nhqgb16fsv-ghc-lib-parser-ex-9.6.0.2' '/nix/store/pdri4rmkj4vlnqfcc34m3xawp69rs9ic-ghcide-2.9.0.0' '/nix/store/q8dvkfmx7i1r14077bawkj0v83nsibwl-base16-bytestring-1.0.2.0' '/nix/store/k5wr0jix4sj3hjp8nxfcsg399b7sp1m6-co-log-core-0.3.2.2' '/nix/store/8ddr0ar51syfazw1shqa0xpghl6nps1q-cryptohash-sha1-0.11.101.0' '/nix/store/k9jmlhjh1js48h0dz00w3lyvli74fs0i-dependent-map-0.4.0.0' '/nix/store/sn9xsmw398r9g1pqkw736h198cnialr2-constraints-extras-0.4.0.1' '/nix/store/zqb7sl4f7i8y7x3a4v2fpjzzj0iwbqc4-constraints-0.14.2' '/nix/store/gr2j89wif81s9zldxi9sq4x0zw1frvzk-boring-0.2.2' '/nix/store/4niw7xfxa0sq8ah7xxz2pzcmr7bzkk2y-dependent-sum-0.7.2.0' '/nix/store/70wihfxd45hcndbq98x0zl38rmnkdsjq-some-1.0.6' '/nix/store/5l8c32581f6qazcn8rcla802li7xflda-enummapset-0.7.2.0' '/nix/store/xk9w3rqqfr3kkzl4mwmg8qw9b7nyn672-fingertree-0.1.5.0' '/nix/store/fhjd0hb2h730mkzzhcr99i48r0viyn5p-focus-1.0.3.2' '/nix/store/zfznxa1x6zk6s0c8109lmdb2hapmfwsm-ghc-trace-events-0.1.2.9' '/nix/store/cvwyw3q67bx0vhhwbvalh2a5l3f41czw-Glob-0.10.2' '/nix/store/6qcp2mmj75dz152lrpv9pvw6hj2jcdr4-haddock-library-1.11.0' '/nix/store/gn1q6q8g6iq24yf8ra4mpd20w6v23ii2-hie-bios-0.14.0' '/nix/store/913gdxr4238y1pr5kn4aczhmvr65wwpa-temporary-1.3' '/nix/store/6lavvz24zvfz1f3vci4qv4jixx964x1n-hie-compat-0.3.1.2' '/nix/store/05cpdgrfvgzda1bnzry3scl5gnwg5943-hiedb-0.6.0.1' '/nix/store/y18qkpzak68l9pgchbnw2kjzjf95blc7-algebraic-graphs-0.7' '/nix/store/6vb32gnm15zdlzy153p1as61mxr9q9iv-lucid-2.11.20230408' '/nix/store/sjzhgnyanx4mzmmri059v6kwzdidlh78-mmorph-1.2.0' '/nix/store/kr64dzwfshb9nifhcyv0bwk8i7d02l87-sqlite-simple-0.4.19.0' '/nix/store/ah36vi10l2pi8iffxabf99f0knh5l3s4-blaze-textual-0.2.3.1' '/nix/store/vchchv85i0krp1s3y4fq38zn99kv6v9r-direct-sqlite-2.3.29' '/nix/store/1jymkdh6s7dmqc80z0d5hkbiaxrz8gg6-Only-0.1' '/nix/store/2c37xwrsh2gxgqkc5mwb8lpggg301yll-terminal-size-0.3.4' '/nix/store/9s1dyf44dhw69125vvhv4arjv7h20p7j-hls-graph-2.9.0.0' '/nix/store/w8v51h90vs6fzfhcfvbbvj741dn7lrgy-js-dgtable-0.5.2' '/nix/store/971x1l7f46km9xwkkjl8dp18jnr61r2z-list-t-1.0.5.7' '/nix/store/aa1ybzv2qzmr7w3n9nphzgxxmmg40qjr-logict-0.8.1.0' '/nix/store/jbc7xnk5hwc56mah5vj781hq5bg445a0-monad-control-1.0.3.1' '/nix/store/qbvxnwj6906xrikcab497c2s60py1nng-stm-containers-1.2.1' '/nix/store/p9iqy66pm9fh2n1wz0h9y9wd220z6ry0-deferred-folds-0.9.18.6' '/nix/store/b44ll32l1kxrlg74dq5fzp95iwkpynr0-stm-hamt-1.2.1' '/nix/store/ak4f3hgyg4mj8r38pshhrrhh3c8scphl-primitive-extras-0.10.2' '/nix/store/h9d5q62h34g1asi21jiwmnlmbhx0gnbq-primitive-unlifted-2.1.0.0' '/nix/store/3irczjp4vnwq0f8c2ccw00pij1n098z4-hls-plugin-api-2.9.0.0' '/nix/store/69l3rdfnp0li31vgab8anglvj3gy1yya-hw-fingertree-0.1.2.1' '/nix/store/wf85kjdm7nzlsn26vqyfwlgwr76qf269-hw-prim-0.6.3.2' '/nix/store/835lc7xbsywr5xfsrsvziic4gb5zf2gb-lens-5.2.3' '/nix/store/56b316m20zhf2blai97rd47wjm824va6-call-stack-0.4.0' '/nix/store/7gwgad3hxgirf7qjz9ralg4p1hpyy2b1-kan-extensions-5.2.6' '/nix/store/rf70m8smgbqcfprx7mypibl0l5x7bfb5-adjunctions-4.4.2' '/nix/store/sgmvj3q34gmycc9p668y7z20lmisvfqa-void-0.7.3' '/nix/store/2i0w2vxlggldyrmyymi09plz5n1yzs59-invariant-0.6.3' '/nix/store/27lr0c5nqrl4fmp7nmgq50b9qhrw32iy-parallel-3.2.2.0' '/nix/store/6pdqy6kjmpb2gm5yc85gzms2zcjsnxkm-reflection-2.1.8' '/nix/store/1qgh6cwxaq3lrw21cbgwzdh21ghxb2k3-lens-aeson-1.2.3' '/nix/store/yrbmkmh18n3ycv6bd05wakm6gx87ly1p-lsp-2.7.0.0' '/nix/store/l55ickr47vzdw3rb2hnzspzh29nb0q4r-lsp-types-2.3.0.0' '/nix/store/zmv1d1i7ijg6jdlmd195q5vb3dmhqp1s-generic-arbitrary-1.0.1' '/nix/store/xw0pc41aff3g89bp6chw331gxdv6rpwv-mod-0.2.0.1' '/nix/store/9hvjh2kmiwlly6bhqh8bjbx54z59m7gh-semirings-0.6' '/nix/store/n8w0b2cgxpsmbh7j65jfbw0a95rmmsjk-quickcheck-instances-0.3.30' '/nix/store/zk8c6rlqg5zxihcrvwk52k1gpg97kgh7-row-types-1.0.1.2' '/nix/store/bcnxvfys315hiv3isj793wvbnfacj48v-generic-lens-2.2.2.0' '/nix/store/idafrs6qs5bhdk46zq1c9r9wl9zl20fz-generic-lens-core-2.2.1.0' '/nix/store/49rlx19jfvb4g7gbaw8ch7sapx24qqyc-indexed-profunctors-0.1.1.1' '/nix/store/wb813fs7nq0rch0hrvmvr41jx7j9pb4r-regex-1.1.0.2' '/nix/store/f86523avl0q68g1xd2ymvrlg68ryfln5-regex-base-0.94.0.2' '/nix/store/rarkf5i6pfwfjpkfp42zqjzx6laglps3-regex-pcre-builtin-0.95.2.3.8.44' '/nix/store/a8cw4aihv2i5j58gpfhl0kfwisyaw2px-regex-tdfa-1.3.2.2' '/nix/store/k057j415rfg7j7mmi48d4i7hk33w3naa-time-locale-compat-0.1.1.5' '/nix/store/1viir5sy411fc81i9hniqrm0hfrib752-sorted-list-0.2.2.0' '/nix/store/j8m1645xcj7kavk07kkvl7dmv07q404r-text-rope-0.2' '/nix/store/08ybz7yzb83r4470hz7w87g9gw10b1if-opentelemetry-0.8.0' '/nix/store/26rlz45s54gs9rnyqp8m1ydcxliqrpsm-implicit-hie-0.1.4.0' '/nix/store/6lkn2h8w4zpv29fpxj62f8zm9kdn373q-filepattern-0.1.3' '/nix/store/6lkn2h8w4zpv29fpxj62f8zm9kdn373q-filepattern-0.1.3' '/nix/store/n71r6rw5zvfwalr04pxgyszl4fvd4cnb-gitrev-1.3.1' '/nix/store/ddhz6q7a0v7232ph395r71h0g11jlkzw-githash-0.1.7.0' '/nix/store/0rwlfpv5q4p27pygb592zkrin1aig23z-hlint-3.6.1' '/nix/store/1awpgnm4ijffmnay86h9lrvxi2gyf7im-cpphs-1.20.9.1' '/nix/store/f9if1nwdg8k5bvycmnlqbrpdv71ha6lk-polyparse-1.13' '/nix/store/f9if1nwdg8k5bvycmnlqbrpdv71ha6lk-polyparse-1.13' '/nix/store/12clkvqgjmvls4jkfsw23drjgvwz32pm-deriving-aeson-0.2.9' '/nix/store/k29d5x6zkkq3ll2pjza3q08x5lji5rir-hscolour-1.25' '/nix/store/sai3gagg8lpix53nnm8f7gg4m6ybxg3x-hls-test-utils-2.9.0.0' '/nix/store/8sqpkjh7g93bh1b4fwdlw4i7ln3qnfcz-lsp-test-0.17.1.0' '/nix/store/ncqlsmyyqi9b691lq2v76pzf5daf0vrs-conduit-parse-0.2.1.1' '/nix/store/7vklyvgrhcvqx6j2k5bv9gv9sfhlz1a4-parsers-0.12.11' '/nix/store/znrvcg2crg4kxi8i4ss7ya0lzmbamaxz-charset-0.3.10' '/nix/store/25mhpm903l6q98vbwbqssh5pn59bpbrm-neat-interpolation-0.5.1.4' '/nix/store/gl2y4hpvr8knnphfl7d1d9xv8sgncx4h-tasty-1.4.3' '/nix/store/czz22kx5sp9si94w0paippqppyfn8k22-tasty-expected-failure-0.12.3' '/nix/store/lmhf0v6l6zwmsjcp01wmjvdb4ycpn2lk-unbounded-delays-0.1.1.1' '/nix/store/11rcbb80cpbahiv2p4257h8fnpr5ipwb-tasty-golden-2.3.5' '/nix/store/dcjkl6wfwmfcb1kghg2rjwa02dv0pp5s-tasty-hunit-0.10.2' '/nix/store/ar62y4c98hr5amzdybg352wkc7xi8v4p-tasty-rerun-1.1.19' '/nix/store/vlyyz814im8qi0r8g015xfw90kz4q0w6-optparse-simple-0.1.1.4' '/nix/store/yf22z3xh3rdqv60drklzsqarsp5a8vi1-ormolu-0.7.2.0' '/nix/store/8fpnnqzwjpykkl9wcmyb1n4j5xm863ns-ormolu-0.7.2.0-bin' '/nix/store/9jnd03qfgznij6hkfhprz2pcfz592l48-regex-applicative-0.3.4' '/nix/store/qwl8cjanyrm89f2sx2h4qyai7dh5dmw7-filtrable-0.1.6.0' '/nix/store/s9iz5knlxiiajapd58fqx28lbv1kpfqb-retrie-1.2.3' '/nix/store/ys8l4456h1dmll55czz6c88s5yddq2kh-random-shuffle-0.0.4' '/nix/store/k961xfdi0lx3gpxxhvfh5zrdkkfbhrmh-MonadRandom-0.6' '/nix/store/z4g2ydchmdl3admrax1c3rz8dak9by89-shake-0.19.8' '/nix/store/drhjl9kfvgvhczgrr6g542mm3yr5a8yw-heaps-0.4' '/nix/store/drhjl9kfvgvhczgrr6g542mm3yr5a8yw-heaps-0.4' '/nix/store/hwx3v93mkiqw1jbafvvls4by2i4d9m7d-stan-0.1.3.0' '/nix/store/kdgy9rrldni7p7pzigjmv2j9jkfg4hv3-base64-0.4.2.4' '/nix/store/71jfra8s7034j1mpm636mbnw837qdjhm-clay-0.14.0' '/nix/store/q8xirb0fvg3a10zg4drwcq667vi88inz-colourista-0.1.0.2' '/nix/store/xb1iwm5m5hircqxp5ybvyypicilpra6f-dir-traverse-0.2.3.0' '/nix/store/ilvw92l0xf0jq0lraarl064gbdqn6nsz-extensions-0.1.0.1' '/nix/store/qns9qkqgnpxq7chg5dhwvip6v5s7vczv-microaeson-0.1.0.2' '/nix/store/4xdl3fcjwfyw0c2a8rp7vbdkwbykk2x2-pretty-simple-4.1.2.0' '/nix/store/84y4mgpjyvqyckpif57ycg7qni6nc5vs-relude-1.2.1.0' '/nix/store/g3vvz041z6rx89496rnr8j45929r7cr8-slist-0.2.1.0' '/nix/store/bpaqb1g9nmc0ck5mawq6lgb4cf7j8x0g-tomland-1.3.3.3' '/nix/store/kq9bqm79vq17n54zpqp7ix1f6dycdxxz-validation-selective-0.2.0.0' '/nix/store/m6va1hzmdk2p8dgnwbavjik168di2gxa-selective-0.7.0.1' '/nix/store/rgs1ivgjb99mlgv39j8bvp25ivl91n9r-trial-0.0.0.0' '/nix/store/ri56kmnm1ka81j68l0cxp5si6cj2x0a4-trial-optparse-applicative-0.0.0.0' '/nix/store/v7nwjy37mj53s96029vzz99g4nsmgmx4-trial-tomland-0.0.0.0' '/nix/store/lf97ia5yf8dd3isinrr3yr7060s7slxa-stylish-haskell-0.14.5.0' '/nix/store/w15d4369yngphyvfy3sz8id5aqr6fpfq-HsYAML-0.2.1.4' '/nix/store/vd6p2dklfx1qzmxlhpgz8kag9rrzz85x-HsYAML-aeson-0.2.0.1' '/nix/store/vd6p2dklfx1qzmxlhpgz8kag9rrzz85x-HsYAML-aeson-0.2.0.1' '/nix/store/3arz93p7rcngc14502zzglf8mi6mvpn7-ghc-9.6.6-with-packages' '/nix/store/p28ag98pq969vklwz28fw20wvrv64cgj-cabal-install-3.12.1.0' '/nix/store/3x437fl4rcrsrfnlyib4q2srvplxxpnc-Cabal-3.12.1.0' '/nix/store/m8y5wy9gnwnp5dd5inkjgfvhb386cw41-Cabal-syntax-3.12.1.0' '/nix/store/i73w15y1q1xnz9dwk99nrqhkhba3x43g-cabal-install-solver-3.12.1.0' '/nix/store/8d13giflqds5fpibwraicnsvicg9irfk-edit-distance-0.2.2.1' '/nix/store/95h6bq9lj73dm10qviijxaywxvfyqyqw-cryptohash-sha256-0.11.102.1' '/nix/store/0bk09ik80kdgsyprs6d27v4g0inq89vm-echo-0.1.4' '/nix/store/mxvq6i643wdqp3rj2dimgzvly7p7ld7r-hackage-security-0.6.2.6' '/nix/store/f5lkm03li5hdkcmlwkh3irqx4n4wc72r-ed25519-0.0.5.0' '/nix/store/pbggjvjpymd01iq42mcis99iwp9c3sh0-lukko-0.1.1.3' '/nix/store/m8jp7fjxmf1p9rcflz1gpgyjqaz3zj34-HTTP-4000.4.1' '/nix/store/5r5pi24s6mym2aaj9r3aq26njh87gsjm-open-browser-0.2.1.0' '/nix/store/73lqvqd8ymy5cz4jwpgm17wsjyrhl8pv-regex-posix-0.96.0.1' '/nix/store/2q0wqid6mh5f9bxdjcj1nwddd6ppmp7g-resolv-0.2.0.2' '/nix/store/xyrf0z3qpvh26hc55wmw2q3b3y2d5vrr-semaphore-compat-1.0.0' '/nix/store/0ajy21fdx91yqq5jhv5bw0gk20c4b9kf-ghcid-0.8.9' '/nix/store/y77k19nmq0c1zsh0lpq5f8rynqxpwwj1-fsnotify-0.4.1.0' '/nix/store/n9dm6hk7d57h7dkfb27hib9i28anm4nr-hinotify-0.4.1' '/nix/store/mqyp0qgmi89f36l6j1lhwhvmn0srqrfb-ghcid-0.8.9-bin' '/nix/store/k97fic16vmpf9z6vjx5dgd6rxcvv5wwh-patchelf-0.15.0' '/nix/store/9l3havpzc3w1xggd19l5c395az4yh449-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/12lvf0c7xric9cny7slvf9cmhypl1p67-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/aazf105snicrlvyzzbdj85sx4179rpfp-set-source-date-epoch-to-latest.sh' '/nix/store/gps9qrh99j7g02840wv5x78ykmz30byp-strip.sh' '/nix/store/zznja5f8v3jafffyah1rk46vpfcn38dv-gcc-wrapper-13.3.0' '/nix/store/b74nxf0yn2dzha02mgdxyklaqjaijzqp-binutils-wrapper-2.42' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/z7nr6aqlzv51pk5ar8bgzg2alfqvi8fd-ncurses-6.4.20221231' '/nix/store/4ybgqxv43z9sk9lccwq6dgmz6j32syr1-libffi-3.4.6' '/nix/store/hld4f6s0yapc7qp71zfyjrqgrpvk6k4d-elfutils-0.191' '/nix/store/mdnhaasvbh5mmxqd5yqc9qvyzc48i998-gmp-with-cxx-6.3.0' '/nix/store/z7nr6aqlzv51pk5ar8bgzg2alfqvi8fd-ncurses-6.4.20221231' )
declare -a pkgsHostTarget=()
declare -a pkgsTargetTarget=()
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preferLocalBuild='1'
export preferLocalBuild
prefix='/home/rkc/Code/payme/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/izpf49b74i15pcr9708s3xdwyqs4jxwl-bash-5.2p32/bin/bash'
export shell
shellHook=''
export shellHook
stdenv='/nix/store/91d27rjqlhkzx7mhzxrir1jcr40nyc7p-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    while IFS='' read -r varName; do
        nixTalkativeLog "@${varName}@ -> ${!varName}";
        args+=("--subst-var" "$varName");
    done < <(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }')
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        nixTalkativeLog "calling implicit '$hookName' function hook";
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            nixTalkativeLog "sourcing implicit '$hookName' script hook";
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                nixTalkativeLog "evaling implicit '$hookName' string hook";
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_logHook ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    local hookKind="$1";
    local hookExpr="$2";
    shift 2;
    if declare -F "$hookExpr" > /dev/null 2>&1; then
        nixTalkativeLog "calling '$hookKind' function hook '$hookExpr'" "$@";
    else
        if type -p "$hookExpr" > /dev/null; then
            nixTalkativeLog "sourcing '$hookKind' script hook '$hookExpr'";
        else
            if [[ "$hookExpr" != "_callImplicitHook"* ]]; then
                local exprToOutput;
                if [[ ${NIX_DEBUG:-0} -ge 5 ]]; then
                    exprToOutput="$hookExpr";
                else
                    local hookExprLine;
                    while IFS= read -r hookExprLine; do
                        hookExprLine="${hookExprLine#"${hookExprLine%%[![:space:]]*}"}";
                        if [[ -n "$hookExprLine" ]]; then
                            exprToOutput+="$hookExprLine\\n ";
                        fi;
                    done <<< "$hookExpr";
                    exprToOutput="${exprToOutput%%\\n }";
                fi;
                nixTalkativeLog "evaling '$hookKind' string hook '$exprToOutput'";
            fi;
        fi;
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        nixTalkativeLog "sourcing setup hook '$pkg'";
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        nixTalkativeLog "sourcing setup hook '$pkg/nix-support/setup-hook'";
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget="check";
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget="test";
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray checkFlags=VERBOSE=y checkFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
concatStringsSep ()
{
 
    local sep="$1";
    local name="$2";
    local type oldifs;
    if type=$(declare -p "$name" 2> /dev/null); then
        local -n nameref="$name";
        case "${type#* }" in 
            -A*)
                echo "concatStringsSep(): ERROR: trying to use concatStringsSep on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                local IFS="$sep";
                echo -n "${nameref[*]}"
            ;;
            *)
                echo -n "${nameref// /"${sep}"}"
            ;;
        esac;
    fi
}
concatTo ()
{
 
    local -n targetref="$1";
    shift;
    local arg default name type;
    for arg in "$@";
    do
        IFS="=" read -r name default <<< "$arg";
        local -n nameref="$name";
        if [[ ! -n "${nameref[@]}" && -n "$default" ]]; then
            targetref+=("$default");
        else
            if type=$(declare -p "$name" 2> /dev/null); then
                case "${type#* }" in 
                    -A*)
                        echo "concatTo(): ERROR: trying to use concatTo on an associative array." 1>&2;
                        return 1
                    ;;
                    -a*)
                        targetref+=("${nameref[@]}")
                    ;;
                    *)
                        if [[ "$name" = *"Array" ]]; then
                            nixErrorLog "concatTo(): $name is not declared as array, treating as a singleton. This will become an error in future";
                            targetref+=(${nameref+"${nameref[@]}"});
                        else
                            targetref+=(${nameref-});
                        fi
                    ;;
                esac;
            fi;
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        concatTo flagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    concatTo flagsArray distFlags distFlagsArray distTarget=dist;
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        { 
            install -m 0600 /dev/null "$NIX_BUILD_TOP/env-vars" && export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars"
        } || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.42: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.42: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
            concatTo flagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray installCheckTarget=installcheck;
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
    concatTo flagsArray makeFlags makeFlagsArray installFlags installFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
nixChattyLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 5 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixDebugLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 6 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixErrorLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 0 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixInfoLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 3 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixNoticeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 2 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixTalkativeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 4 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixVomitLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 7 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixWarnLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 1 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    concatTo patchesArray patches;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        concatTo flagsArray patchFlags=-p1;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" type -P "env" || true)";
                args="-S $(PATH="${!pathName}" type -P "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" type -P "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" type -P "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime endTime;
    startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x -- "${sourceRoot}";
        cd -- "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase";
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    printf "@nix { \"action\": \"setPhase\", \"phase\": \"%s\" }\n" "$phase" >&"$NIX_LOG_FD"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -printf '%D-%i,%p\0' | sort -t, -k1,1 -u -z | cut -d, -f2- -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream() in derivation $name: WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        if [ "$replace_mode" == --replace-warn ]; then
                            printf "substituteStream() in derivation $name: WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                        else
                            if [ "$replace_mode" == --replace-fail ]; then
                                printf "substituteStream() in derivation $name: ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                                return 1;
                            fi;
                        fi;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream() in derivation $name: ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream() in derivation $name: ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream() in derivation $name: ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    concatTo srcsArray srcs;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/q6x5ag0rns4swggcyvcgd1x5i488ws6c-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    [[ $path == -* ]] && path="./$path";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
